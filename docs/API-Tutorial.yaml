openapi: 3.0.3
info:
  title: API-Tutorial
  version: '1.0'
  description: API-Tutorial について仕様を説明します。本APIは書籍の扱うサービスに関するAPIであり、これを使用することにより、書籍に対してCRUD処理を行うことができます。
servers:
  - url: 'http://localhost:3000'
tags:
  - name: book
    description: 書籍に関する操作
  - name: user
    description: ユーザーに関する操作
paths:
  /books:
    get:
      summary: 本の一覧を取得
      tags:
        - book
      description: 本の一覧を返す
      operationId: getBooks
      responses:
        '200':
          description: 本の一覧を取得
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '400':
          description: リクエストに問題がある
    post:
      tags:
        - book
      summary: 本の追加
      description: 本の追加
      operationId: postBook
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
        required: true
      responses:
        '200':
          description: 本が作成された
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '400':
          description: リクエストに問題がある
  /books/{bookId}:
    put:
      tags:
        - book
      summary: 特定の本の情報を更新
      description: IDによって特定の本を更新する
      operationId: putBooksBookId
      parameters:
        - name: bookId
          in: path
          description: 更新する本のID
          required: true
          schema:
            type: number
      requestBody:
        description: 登録されている本の情報を更新
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
      responses:
        '200':
          description: 本が更新された
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '400':
          description: リクエストに問題がある
        '404':
          description: 本が存在しない
    get:
      tags:
        - book
      summary: 特定の本の情報を取得
      description: 特定の本の情報を返す
      operationId: get-books-bookId
      parameters:
        - name: bookId
          in: path
          description: 返すための本のID
          required: true
          schema:
            type: number
      responses:
        '200':
          description: 本が取得された
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '400':
          description: リクエストに問題がある
        '404':
          description: 本が存在しません
    delete:
      tags:
        - book
      summary: 特定の本を削除
      description: 特定の本を削除
      operationId: deleteBook
      parameters:
        - name: bookId
          in: path
          description: 削除する本のID
          required: true
          schema:
            type: number
      responses:
        '204':
          description: 本を削除しました
        '400':
          description: リクエストに問題がある
        '404':
          description: 本が存在しません
  /user:
    post:
      tags:
        - user
      summary: ユーザーを作成
      description: ログインしたユーザーのみが実行できる
      operationId: createUser
      requestBody:
        description: 作成されたユーザーオブジェクト
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        '200':
          description: ユーザーが作成された
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: リクエストに問題がある
  /user/createWithList:
    post:
      tags:
        - user
      summary: 指定の配列でユーザーのリストを作成
      description: 指定の配列でユーザーのリストを作成
      operationId: createUsersWithListInput
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/User'
        required: true
      responses:
        '200':
          description: ユーザーがリストに追加された
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: リクエストに問題がある
  /user/login:
    get:
      tags:
        - user
      summary: ユーザーをログインさせる
      description: ユーザーをログインさせる
      operationId: loginUser
      parameters:
        - name: email
          in: query
          description: ログイン用のメールアドレス
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: ログイン用のパスワード
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ログインしました
          headers:
            X-Rate-Limit:
              description: ユーザーが許可する1時間あたりの呼び出し
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: トークンの期限が切れるUTCの日付
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: string
        '400':
          description: メールアドレス/パスワードが無効です
  /user/logout:
    get:
      tags:
        - user
      summary: ログイン中のユーザーをログアウトさせる
      description: ログイン中のユーザーセッションをログアウトする
      operationId: logoutUser
      responses:
        '200':
          description: ログアウトしました
        '400':
          description: リクエストに問題がある
  /user/{username}:
    get:
      tags:
        - user
      summary: 名前でユーザーを取得
      description: 名前でユーザーを取得
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: 取得したいユーザーの名前
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 特定のユーザーを取得した
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: 指定したユーザー名が無効
        '404':
          description: ユーザーが存在しない
    put:
      tags:
        - user
      summary: ユーザーの更新
      description: ログイン中のユーザーが更新できる
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: 上書きする名前
          required: true
          schema:
            type: string
      requestBody:
        description: 既存のユーザーを更新する
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: ユーザーが更新された
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: リクエストに問題がある
    delete:
      tags:
        - user
      summary: ユーザーを削除
      description: ログイン中のユーザーが削除できる
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: 削除するユーザーの名前
          required: true
          schema:
            type: string
      responses:
        '400':
          description: 指定したユーザー名が無効
        '404':
          description: ユーザーが存在しない
components:
  schemas:
    Book:
      required:
        - id
        - title
        - body
      type: object
      properties:
        id:
          type: number
          example: 4
          readOnly: true
        title:
          type: string
          example: 吾輩は猫である
        body:
          type: string
          example: 名前はまだない。
        createDate:
          type: string
          format: date-time
          example: '2020-01-31T23:59:59+09:00'
          readOnly: true
        updateDate:
          type: string
          format: date-time
          example: '2020-01-31T23:59:59+09:00'
          readOnly: true
    User:
      required:
        - id
        - username
        - firstName
        - lastName
        - email
        - password
      type: object
      properties:
        id:
          type: number
          example: 10
          readOnly: true
        username:
          type: string
          example: nobita
        firstName:
          type: string
          example: nobi
        lastName:
          type: string
          example: nobita
        email:
          type: string
          example: nobi@email.com
        password:
          type: string
          example: '12345'
        createDate:
          type: string
          format: date-time
          example: '2020-01-31T23:59:59+09:00'
          readOnly: true
        updateDate:
          type: string
          format: date-time
          example: '2020-01-31T23:59:59+09:00'
          readOnly: true
  requestBodies:
    Book:
      description: 一覧に追加される本
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Book'
    UserArray:
      description: ユーザーリストオブジェクト
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
